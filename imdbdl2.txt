pip install tensorflow
-----------------------------------
from tensorflow.keras.datasets import imdb
(train_data, train_labels), (test_data, test_labels) = imdb.load_data(num_words=10000)
----------------------------------------------------------------------------------------
train_labels.shape
---------------------------------
train_data[0]
----------------------
word_index = imdb.get_word_index()
reverse_word_index = dict([(value, key) for (key, value) in word_index.items()])
reverse_word_index
------------------------------------------------------------------------------------
" ".join([reverse_word_index.get(i - 3, "?") for i in train_data[0]])
-------------------------------------------------------------------------------
import numpy as np
------------------------------------------------------------------------------
def vectorize_sequences(sequences, dimension=10000):
  results = np.zeros((len(sequences), dimension))
  for i, sequence in enumerate(sequences):
    for j in sequence:
      results[i, j] = 1
  return results
---------------------------------------------------------------------------
vectorize_sequences(train_data).shape
-------------------------------------------------------
vectorize_sequences(train_data)[0]
------------------------------------------------------
x_train = vectorize_sequences(train_data)
x_test = vectorize_sequences(test_data)
-----------------------------------------------------
y_train = np.asarray(train_labels).astype("float32")
y_test = np.asarray(test_labels).astype("float32")
--------------------------------------------------------
from tensorflow import keras
from tensorflow.keras import layers
-----------------------------------------------
model = keras.Sequential([
    layers.Dense(16, activation='relu'),
    layers.Dense(16, activation='relu'),
    layers.Dense(1, activation='sigmoid'),
])
-------------------------------------------------
model.compile(
    optimizer='rmsprop',
    loss='binary_crossentropy',
    metrics=['accuracy']
)
----------------------------------------------------------
x_val = x_train[:10000]
partial_x_train = x_train[10000:]
y_val = y_train[:10000]
partial_y_train = y_train[10000:]
----------------------------------------------------------
history = model.fit(
    partial_x_train,
    partial_y_train,
    epochs=20,
    batch_size=512,
    validation_data=(x_val, y_val)
)
--------------------------------------------------------
import matplotlib.pyplot as plt
history_dict = history.history
loss_values = history_dict['loss']
val_loss_values = history_dict['val_loss']
acc = history_dict["accuracy"]
val_acc = history_dict["val_accuracy"]
epochs = range(1, len(loss_values) + 1)
---------------------------------------------------------
plt.plot(epochs, loss_values, 'bo', label='Training Loss')
plt.plot(epochs, val_loss_values, 'b', label='Validation Loss')
plt.title('Training and Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend();
-------------------------------------------------------------
plt.plot(epochs, acc, 'bo', label='Training Accuracy')
plt.plot(epochs, val_acc, 'b', label='Validation Accuracy')
plt.title('Training and Validation Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend();
-----------------------------------------------------------------
model = keras.Sequential([
    layers.Dense(16, activation='relu'),
    layers.Dense(16, activation='relu'),
    layers.Dense(1, activation='sigmoid'),
])
-------------------------------------------------------------
model.compile(
    optimizer='rmsprop',
    loss='binary_crossentropy',
    metrics=['accuracy']
)
---------------------------------------------------
history = model.fit(
    partial_x_train,
    partial_y_train,
    epochs=4,
    batch_size=512,
    validation_data=(x_val, y_val)
)
------------------------------------------------------
result = model.evaluate(x_test, y_test)
------------------------------------------------
model.predict(x_test)
----------------------------------------